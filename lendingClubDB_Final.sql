-- MySQL Script generated by MySQL Workbench
-- Sat Mar  7 10:25:04 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

# Data used: https://www.kaggle.com/wendykan/lending-club-loan-data

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb12
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb12
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS mydb12 DEFAULT CHARACTER SET utf8 ;
USE mydb12;

-- -----------------------------------------------------
-- Table `mydb12`.`MEMBER_T`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb12`.`MEMBER_T` (
  `MEMBERID` INT NOT NULL,
  `Employer` VARCHAR(45) NOT NULL,
  `Employment_Length` VARCHAR(15) NOT NULL,
  `Annual_Income` VARCHAR(10) NOT NULL,
  `Verified_Income_Status` VARCHAR(20) NOT NULL DEFAULT 'Not Verified',
  `Home_Ownership` VARCHAR(10) NOT NULL,
  `Zipcode` VARCHAR(5) NOT NULL,
  `State` CHAR(2) NOT NULL,
  PRIMARY KEY (`MEMBERID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb12`.`LOAN_REQUEST`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb12`.`LOAN_REQUEST` (
  `LoanID` INT NOT NULL,
  `Loan_Amount` INT NULL,
  `Funded_Amount` INT NULL,
  `Term` VARCHAR(45) NULL,
  `Interest_Rate` DECIMAL NULL,
  `Installment` DECIMAL NULL,
  `Grade` CHAR(1) NULL,
  `Issue_Date` VARCHAR(20) NULL,
  `Loan_Status` VARCHAR(25) NULL,
  `Description` VARCHAR(3000) NULL,
  `LoanPurpose` VARCHAR(65) NULL,
  `MEMBERID` INT NOT NULL,
  PRIMARY KEY (`LoanID`),
  INDEX `fk_LOAN_REQUEST_MEMBER_T_idx` (`MEMBERID` ASC) VISIBLE,
  CONSTRAINT `fk_LOAN_REQUEST_MEMBER_T`
    FOREIGN KEY (`MEMBERID`)
    REFERENCES `mydb12`.`MEMBER_T` (`MEMBERID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb12`.`PAYMENT`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb12`.`PAYMENT` (
  `PaymentID` INT NOT NULL,
  `Outstanding_Principal` DECIMAL NULL,
  `Total_Payment` DECIMAL NULL,
  `Total_Rec_Principal` DECIMAL NULL,
  `Total_Rec_Late_Fee` DECIMAL NULL,
  `Total_Rec_Interest` DECIMAL NULL,
  `Last_Payment_Amount` DECIMAL NULL,
  `Last_Payment_Date` VARCHAR(20) NULL,
  `LoanID` INT NOT NULL,
  PRIMARY KEY (`PaymentID`),
  INDEX `fk_PAYMENT_LOAN_REQUEST1_idx` (`LoanID` ASC) VISIBLE,
  CONSTRAINT `fk_PAYMENT_LOAN_REQUEST1`
    FOREIGN KEY (`LoanID`)
    REFERENCES `mydb12`.`LOAN_REQUEST` (`LoanID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb12`.`CREDIT_HISTORY`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb12`.`CREDIT_HISTORY` (
  `MEMBERID` INT NOT NULL,
  `debtToIncome` DECIMAL NULL,
  `Months_Since_Last_Delinq` INT NULL DEFAULT 0,
  `degrogatoryPublicRecords` INT NULL,
  `Earliest_Credit_Line` VARCHAR(20) NULL,
  `Inquiry_Last_6months` INT NULL,
  `Open_Acount_Number` INT NULL,
  `Delinq_2yrs` INT NULL,
  `total_account` INT NULL,
  PRIMARY KEY (`MEMBERID`),
  INDEX `fk_CREDIT_HISTORY_MEMBER_T1_idx` (`MEMBERID` ASC) VISIBLE,
  CONSTRAINT `fk_CREDIT_HISTORY_MEMBER_T1`
    FOREIGN KEY (`MEMBERID`)
    REFERENCES `mydb12`.`MEMBER_T` (`MEMBERID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


select * from Loan_Request;
select * from Payment;
select * from Credit_History;
select * from MEMBER_T;

-- -----------------------------------------------------

## Queries to build 
-- -----------------------------------------------------
## How many loans does each individual have? 
## This one is currently working-
select MemberID, count(*) How_many
from Loan_Request
group by MemberID;


### What are the loans for which the borrowerâ€™s income was not verified?
# working  giving me 856  (USED)
select Verified_Income_Status, 
count(*) Income_Not_Verified
from MEMBER_T
where Verified_Income_Status = 'Not Verified';

# shows all Income Status for each of the 3 types 
select Verified_Income_Status, count(*) Income_Status
from MEMBER_T
group by Verified_Income_Status;

# Will provide me with the income status for the 3 types (USED)
select Verified_Income_Status Income_Status, 
count('Verified_Income_Status')  Verified_Count
from MEMBER_T
group by Verified_Income_Status
order by 2 desc;

select Verified_Income_Status Income_Status,
count('Verified_Income_Status') Count
from MEMBER_T
group by Verified_Income_Status
order by Count asc;

# how many members did not have their income verified, give me the following attributes: MemberID, Employer, Employment_Length
#  and Annual Income?
Select MemberID, Employer, Employment_Length, Annual_Income,
Verified_Income_Status 
From MEMBER_T 
where Verified_Income_Status = 'Not Verified'
group by MEMBERID
order by Annual_Income asc;

-- -----------------------------------------------------
-- -----------------------------------------------------
## Of those who's income was not verified, what was the amount of income reported, DTI, and employer name?
select MEMBER_T.MemberID, Employer, Annual_Income, CREDIT_HISTORY.debtToIncome, 
Verified_Income_Status 
from Member_T  right join CREDIT_HISTORY on Member_T.MemberID = CREDIT_HISTORY.MemberID
where Verified_Income_Status = 'Not Verified' 
and  debtToIncome >= 25
order by debtToIncome DESC;
  
-- -----------------------------------------------------
# DTI Queries - who's income did we not verify?
-- -----------------------------------------------------
### what is the purpose of the loan transaction for the description who defaulted/chargedoff their loans? what is their DTI?
select CREDIT_HISTORY.MemberID, LoanID, CREDIT_HISTORY.debtToIncome, Loan_Request.Loan_Status,
Loan_Request.Funded_Amount, Loan_Request.description
from LOAN_REQUEST Inner join CREDIT_HISTORY on LOAN_REQUEST.MemberID = CREDIT_HISTORY.MemberID
where debtToIncome >= 25 and Loan_Status = "Charged Off"
order by Funded_Amount Desc;

## Income Not verified that resulted in charge offs
Select Member_T.MemberID,LoanID, Verified_Income_Status, LOAN_REQUEST.LOAN_STATUS, 
LOAN_REQUEST.Grade,Loan_Request.Funded_Amount, LOAN_REQUEST.LoanPurpose
From MEMBER_T right join LOAN_REQUEST ON Member_T.MemberID = LOAN_REQUEST.MEMBERID
where Verified_Income_Status = 'Not Verified' and LOAN_STATUS= "Charged Off"
order by Funded_Amount asc;

## Default Query (USED)
Select Member_T.MemberID, LoanID, Employer, Employment_Length, Annual_Income,  
Verified_Income_Status, LOAN_REQUEST.LOAN_STATUS, LOAN_REQUEST.LoanPurpose, LOAN_REQUEST.Description
From MEMBER_T right join LOAN_REQUEST ON Member_T.MemberID = LOAN_REQUEST.MEMBERID
where Verified_Income_Status = 'Not Verified' and LOAN_STATUS= "Charged Off"
order by Annual_Income asc;

## Income Not verified that resulted in charge offs (USED)
Select Member_T.MemberID,LoanID, Verified_Income_Status, LOAN_REQUEST.LOAN_STATUS, 
LOAN_REQUEST.Grade, LOAN_REQUEST.LoanPurpose
From MEMBER_T right join LOAN_REQUEST ON Member_T.MemberID = LOAN_REQUEST.MEMBERID
where Verified_Income_Status = 'Not Verified' and LOAN_STATUS= "Charged Off"
order by Annual_Income asc;



